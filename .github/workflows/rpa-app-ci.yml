# 🤖 RPA App CI Pipeline
# 代码质量检查和测试，不包含构建

name: 🔍 RPA App CI

# 触发条件 - 只在真正需要时触发
on:
  # 只在 PR 时触发代码检查
  pull_request:
    branches: [ main ]
    paths:
      - 'auto-rpa-app/**'
      - '.github/workflows/**'
  # 手动触发
  workflow_dispatch:

# 环境变量
env:
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  code-quality:
    name: 📋 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: auto-rpa-app/package-lock.json

      - name: 📦 安装依赖
        working-directory: auto-rpa-app
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            npm install
          fi

      - name: 🎨 代码格式检查
        working-directory: auto-rpa-app
        run: npm run format:check

      - name: 🔍 ESLint 检查
        working-directory: auto-rpa-app
        run: npm run lint

      - name: 🔷 TypeScript 类型检查
        working-directory: auto-rpa-app
        run: npx tsc --noEmit

  # 单元测试
  test:
    name: 🧪 单元测试
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: auto-rpa-app/package-lock.json

      - name: 📦 安装依赖
        working-directory: auto-rpa-app
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            npm install
          fi

      - name: 🧪 运行测试
        working-directory: auto-rpa-app
        run: npm test -- --coverage --watchAll=false --passWithNoTests 