# 🚀 RPA App 发布工作流
# 仅在推送标签时触发，自动构建并发布 APK

name: 🚀 发布 RPA App

# 触发条件：仅标签推送
on:
  push:
    tags: [ 'v*' ]
  # 手动触发
  workflow_dispatch:
    inputs:
      tag_name:
        description: '发布版本号 (例如: v0.1.0)'
        required: true
        type: string

# 环境变量
env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '33'

jobs:
  # 构建 APK
  build:
    name: 🔨 构建 APK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [debug, release]
    
    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: ☕ 设置 JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🤖 设置 Android SDK
        uses: android-actions/setup-android@v3

      - name: 📦 缓存 Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            auto-rpa-app/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('auto-rpa-app/android/**/*.gradle*', 'auto-rpa-app/android/**/gradle-wrapper.properties') }}

      - name: 📦 安装依赖
        working-directory: auto-rpa-app
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci || npm install
          else
            npm install
          fi

      - name: 🔨 构建 Android APK (${{ matrix.build-type }})
        working-directory: auto-rpa-app/android
        run: |
          export GRADLE_OPTS="-Xmx4g -XX:MaxMetaspaceSize=512m"
          
          if [ "${{ matrix.build-type }}" = "release" ]; then
            ./gradlew assembleRelease --no-daemon --stacktrace
          else
            ./gradlew assembleDebug --no-daemon --stacktrace
          fi

      - name: 📤 上传 APK
        uses: actions/upload-artifact@v4
        with:
          name: rpa-app-${{ matrix.build-type }}
          path: auto-rpa-app/android/app/build/outputs/apk/**/*.apk
          retention-days: 30

  # 发布到 GitHub Releases
  release:
    name: 🏷️ 创建发布
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: ⬇️ 检出代码
        uses: actions/checkout@v4

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📋 准备发布信息
        id: release_info
        run: |
          # 获取标签名
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ inputs.tag_name }}"
          else
            TAG_NAME=${GITHUB_REF#refs/tags/}
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=RPA App $TAG_NAME" >> $GITHUB_OUTPUT
          
          # 获取提交信息
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: 🏷️ 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          files: |
            ./artifacts/**/*.apk
          body: |
            ## 🤖 RPA App 发布 ${{ steps.release_info.outputs.tag_name }}

            ### 📱 APK 下载
            - **app-debug.apk**: 开发测试版本，包含调试信息
            - **app-release.apk**: 生产发布版本，经过优化和混淆

            ### 🔄 更新内容
            ${{ steps.release_info.outputs.commit_message }}

            ### 📊 构建信息
            - **版本**: ${{ steps.release_info.outputs.tag_name }}
            - **提交**: ${{ github.sha }}
            - **构建时间**: ${{ github.event.head_commit.timestamp }}
            - **构建者**: GitHub Actions

            ### 📋 安装说明
            1. 下载对应的 APK 文件
            2. 在 Android 设备上启用"未知来源"安装
            3. 安装 APK 文件

            ---
            **注意**: Release 版本已经过代码混淆和优化，推荐生产环境使用
          draft: false
          prerelease: true
          generate_release_notes: true

      - name: 📊 发布完成
        run: |
          echo "🎉 发布完成!"
          echo "📦 版本: ${{ steps.release_info.outputs.tag_name }}"
          echo "🔗 查看发布: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_info.outputs.tag_name }}" 